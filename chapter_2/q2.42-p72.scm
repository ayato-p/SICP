
(add-load-path "/Users/ayato_p/Programming/SICP/lib" )
(use sicp.util)

(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
	(list empty-board)
	(filter
	 (lambda (positions) (safe? k positions))
	 (flatmap
	  (lambda (rest-of-queens)
	    (map (lambda (new-row)
		   (adjoin-position new-row k rest-of-queens))
		 (enumerate-interval 1 board-size)))
	  (queen-cols (- k 1))))))
  (queen-cols board-size))

(queens 1)
(print (queens 2))
(print (queens 3))
(print (queens 8))
(define empty-board '())

(define (safe? k positions)
  (let ((p (assv-ref positions k)))
    (or (= p 2) (= p 4))))

(define (adjoin-position row col queens)
  (cons (cons col row) queens))

(define (make-position col row)
  (cons col row))
(define (position-col position)
  (car position))
(define (position-row position)
  (cdr position))



(((3 . 1) (2 . 1) (1 . 1))
 ((3 . 2) (2 . 1) (1 . 1))
 ((3 . 3) (2 . 1) (1 . 1))
 ((3 . 1) (2 . 2) (1 . 1))
 ((3 . 2) (2 . 2) (1 . 1))
 ((3 . 3) (2 . 2) (1 . 1))
 ((3 . 1) (2 . 3) (1 . 1))
 ((3 . 2) (2 . 3) (1 . 1))
 ((3 . 3) (2 . 3) (1 . 1))
 ((3 . 1) (2 . 1) (1 . 2))
 ((3 . 2) (2 . 1) (1 . 2))
 ((3 . 3) (2 . 1) (1 . 2))
 ((3 . 1) (2 . 2) (1 . 2))
 ((3 . 2) (2 . 2) (1 . 2))
 ((3 . 3) (2 . 2) (1 . 2))
 ((3 . 1) (2 . 3) (1 . 2))
 ((3 . 2) (2 . 3) (1 . 2))
 ((3 . 3) (2 . 3) (1 . 2))
 ((3 . 1) (2 . 1) (1 . 3))
 ((3 . 2) (2 . 1) (1 . 3))
 ((3 . 3) (2 . 1) (1 . 3))
 ((3 . 1) (2 . 2) (1 . 3))
 ((3 . 2) (2 . 2) (1 . 3))
 ((3 . 3) (2 . 2) (1 . 3))
 ((3 . 1) (2 . 3) (1 . 3)) ((3 . 2) (2 . 3) (1 . 3)) ((3 . 3) (2 . 3) (1 . 3)))
